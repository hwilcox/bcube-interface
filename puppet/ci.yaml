# Puppet CI Resources

classes:
  - nsidc_jenkins
  - nsidc_nfs

# NFS Mounts
nsidc_nfs::sharemounts:
  /share/sw/packages:
    project: sw
    share: packages

# Jenkins Plugins
nsidc_jenkins::plugins:
  git: {}
  git-client: {}
  git-parameter: {}
  scm-api: {}
  credentials: {}
  ssh-credentials: {}
  greenballs: {}
  jobConfigHistory: {}
  mailer: {}
  instant-messaging: {}
  jabber: {}

# Jenkins Jobs
nsidc_jenkins::jobs:
  # clone the project into the shared workspace
  "%{hiera('project')}_1_Checkout_Project":
    gitrepo: git@bitbucket.org:nsidc/search-interface.git
    workspace: /var/lib/jenkins/workspace
    command: |
      git checkout migrate-to-vagrant-nsidc-plugin
      git pull origin migrate-to-vagrant-nsidc-plugin
    trigger_job: "%{hiera('project')}_2_Configure_System"

  # use puppet to install system dependencies, such as Bundler
  "%{hiera('project')}_2_Configure_System":
    command: |
      cd puppet
      librarian-puppet clean
      librarian-puppet update
      cd -
      sudo puppet apply --environment=ci --debug --verbose --modulepath=./puppet/modules --hiera_config=./puppet/hiera.%{hiera('project')}.yaml ./puppet/site.pp

      # Because running `puppet apply` modifies the config.xml for each job
      # defined in ci.yaml, Jenkins has trouble triggering the next job through
      # normal methods (ie, using the trigger_job param), but we can use the
      # Jenkins API to trigger the next job with curl. Just make sure the name
      # of the job in the curl command is correct:
      echo "Triggering a new build of %{hiera('project')}_3_Install_Dependencies"
      curl localhost:8080/job/%{hiera('project')}_3_Install_Dependencies/build
    workspace: /var/lib/jenkins/workspace

  "%{hiera('project')}_3_Install_Dependencies":
    command: |
      bundle install --path vendor/bundle
      npm install
    workspace: /var/lib/jenkins/workspace
    trigger_job: "%{hiera('project')}_4_Check_Syntax"

  "%{hiera('project')}_4_Check_Syntax":
    command: |
      grunt --no-color scsslint
      grunt --no-color jshint
    workspace: /var/lib/jenkins/workspace
    trigger_job: "%{hiera('project')}_5_Run_Unit_Tests"

  "%{hiera('project')}_5_Run_Unit_Tests":
    command: |
      grunt --no-color jasmine
    workspace: /var/lib/jenkins/workspace
    # trigger_job: "%{hiera('project')}_6_Deploy_to_Integration"

  "%{hiera('project')}_6_Deploy_to_Integration":
    workspace: /var/lib/jenkins/workspace
    command: |
      # update 'integration' tag
      git tag -d %{hiera('project')}-integration || true
      git push origin :refs/tags/%{hiera('project')}-integration
      git tag %{hiera('project')}-integration
      git push origin refs/tags/%{hiera('project')}-integration

      rm -f .nsidc-project.yaml
      VAGRANT_NSIDC_YAML=vagrant-nsidc.%{hiera('project')}.yaml

      export NSIDC_PLUGIN_LOG=debug

      grunt --no-color build:acadis

      # cleanup and hijack (temporary hack needed)
      {
        rm -rf .vagrant-integration;
        vagrant nsidc hijack --env=integration --domain=dev.int.nsidc.org --project=%{hiera('project')};
        vagrant nsidc up --env=integration --provision --domain=dev.int.nsidc.org --project=%{hiera('project')};
      } || {
        # provision
        vagrant nsidc up --env=integration --provision --domain=dev.int.nsidc.org --project=%{hiera('project')};
      }

      rm -f .nsidc-project.yaml
      vagrant nsidc ssh --project=%{hiera('project')} --domain=dev.int.nsidc.org --env=integration -c "sudo mkdir -p /usr/share/nginx/; sudo rm -rf /usr/share/nginx/portal/; sudo cp -r /vagrant/tmp/ /usr/share/nginx/portal/"

      index_html=/usr/share/nginx/portal/index.html

      # set the correct environment in index.html
      rm -f .nsidc-project.yaml
      vagrant nsidc ssh --project=%{hiera('project')} --domain=dev.int.nsidc.org --env=integration -c "cat $index_html | grep nsidc.environment; sed -i \"s/nsidc.environment = \\\"vm\\\"/nsidc.environment = \\\"integration\\\"/g\" $index_html; cat $index_html | grep nsidc.environment"
    workspace: /var/lib/jenkins/workspace
    trigger_job: "%{hiera('project')}_7_Run_Acceptance_Tests"

  "%{hiera('project')}_7_Run_Acceptance_Tests":
    command:
    workspace: /var/lib/jenkins/workspace

  "%{hiera('project')}_Destroy_Non_Production_Deployed_VMs":
    description: |
      Clean up non-production VMs that are not needed while the project is not
      in development.
    parameters:
      - type: boolean
        name: integration
        description: destroy the machine deployed to integration
        default: true

      - type: boolean
        name: qa
        description: destroy the machine deployed to qa
        default: true

      - type: boolean
        name: staging
        description: destroy the machine deployed to staging
        default: true

    command: |
      function hijack_and_destroy()
      {
        (vagrant nsidc hijack --env=$1 --project=%{hiera('project')} && vagrant nsidc destroy --env=$1 --project=%{hiera('project')}) || true
      }

      if $integration; then
        hijack_and_destroy integration
      fi

      if $qa; then
        hijack_and_destroy qa
      fi

      if $staging; then
        hijack_and_destroy staging
      fi
